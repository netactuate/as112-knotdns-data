{% if bgp_networks is defined and 'bgp_peers' in nodesetup and 'IPv4' in nodesetup['bgp_peers'] %}
{%   set bgp = nodesetup['bgp_peers'] %}
router id {{ ansible_ssh_host }};

protocol device {
    scan time 10;
}

protocol static announcement {
{%   if 'IPv4' in bgp_networks and bgp_networks['IPv4']|length %}
{%     for networkv4 in bgp_networks['IPv4'] %}
    route {{ networkv4.net }} reject;
{%     endfor %}
{%   endif %}
    import all;
    export none;
}

filter export_upstream {
    if proto = "announcement" then
    {
{%   if 'communities' in bgp_networks and bgp_networks['communities']|length %}
{%     for community in bgp_networks['communities'] %}
        bgp_community.add(({{ community | replace(":", ",") }}));
{%     endfor %}
{%   endif %}
{%   if 'IPv4' in bgp_networks and bgp_networks['IPv4']|length %}
{%     for networkv4 in bgp_networks['IPv4'] %}
{%       if networkv4.origin is defined %}
        if ( net = {{ networkv4.net }} ) then
        {
            bgp_path.empty;
            bgp_path.prepend({{ bgp['localasn'] }});
        }
{%       endif %}
{%     endfor %}
{%   endif %}
{%   if bgp_enabled|default(False) %}
        accept;
{%   endif %}
    }
}

{%   for remotepeer in bgp['IPv4'] %}
protocol bgp {
    import filter {
        accept;
    };
    export limit 10;
    export filter export_upstream;
    local as {{ bgp['localasn'] }};
    source address {{ bgp['localpeerv4'] }};
    graceful restart on;
    neighbor {{ remotepeer }} as {{ bgp['peerasn'] }};
}
{%   endfor %}
{% endif %}
