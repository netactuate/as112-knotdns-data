---
- name: Install KNOT DNS Auth, Telegraf, and configure Telegraf for knot
  hosts: nodes
  become: yes
  vars:
    telegraf_version: "latest"  # Replace with the desired version or leave it as 'latest'
    local_folder_path: "./templates"  # Replace with the path to your db files on the Ansible control node
    influx_url: "http://influx_url:port" # Replace with your InfluxDB2 URL
    influx_token: "<INFLUX TELEGRAF TOKEN>" # Replace with your telegraf data source token from Influx
    influx_org: "AS112"
    influx_bucket: "AS112"
  tasks:
    - name: Add KNOT DNS repository
      ansible.builtin.apt_repository:
        repo: 'ppa:cz.nic-labs/knot-dns-latest'
        state: present
        update_cache: yes

    - name: Install software-properties-common
      ansible.builtin.apt:
        name: software-properties-common
        state: present
    
    - name: Install KNOT DNS
      ansible.builtin.apt:
        name: knot
        state: latest

    - name: Install KNOT DNSTAP
      ansible.builtin.apt:
        name: knot-module-dnstap
        state: latest

    - name: Install Telegraf
      ansible.builtin.apt:
        name: telegraf
        state: latest

    - name: Give Telegraf permission to run knotc without a password
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: '_telegraf ALL=(ALL) NOPASSWD:/usr/sbin/knotc -f stats'
        validate: 'visudo -cf %s'

    - name: Add _telegraf user to knot group
      ansible.builtin.user:
        name: _telegraf
        groups: knot
        append: yes


    - name: Clone telegraf-knot repository from GitHub
      ansible.builtin.git:
        repo: https://github.com/x70b1/telegraf-knot.git
        dest: /opt/telegraf
        clone: yes
        update: yes
        force: yes

    - name: Ensure the telegraf executable script is in place
      ansible.builtin.copy:
        dest: /opt/telegraf/telegraf-knot.sh
        content: |
          #!/bin/sh
          knot_cmd="/usr/sbin/knotc -f stats"

          if stats_output=$($knot_cmd 2>/dev/null); then
              echo "$stats_output" | while read -r line; do
                  stats_module=$( echo "$line" | cut -d "." -f 1 | cut -d '-' -f 2)
                  stats_key=$( echo "$line" | cut -d "." -f 2 | cut -d " " -f 1)
                  stats_value=$( echo "$line" | cut -d " " -f 3 )

                  stats_tag_value=$(echo "$line" | awk -F"[][]" '{print $2}')

                  if [ -n "$stats_tag_value" ]; then
                      stats_tag_key=$( echo "$stats_key" | cut -d "[" -f 1 | cut -d "." -f 2 | cut -d '-' -f 2)
                      stats_key=$( echo "$stats_key" | cut -d "[" -f 1 | cut -d "." -f 2)

                      echo "$stats_module,$stats_tag_key=$stats_tag_value $stats_key=$stats_value"
                  else
                      echo "$stats_module $stats_key=$stats_value"
                  fi
              done
          fi
        mode: 0755

    - name: Configure Telegraf exec input plugin for knot
      ansible.builtin.blockinfile:
        path: /etc/telegraf/telegraf.conf
        block: |
          [[inputs.exec]]
            command = "sh /opt/telegraf/telegraf-knot.sh"
            data_format = "influx"
            interval = "30s"
            timeout = "25s"

          [[outputs.influxdb_v2]]
            urls = ["{{ influx_url }}"]
            token = "{{ influx_token }}"
            organization = "{{ influx_org }}"
            bucket = "{{ influx_bucket }}"

        marker: "# {mark} ANSIBLE MANAGED BLOCK for knot"

    - name: Restart telegraf service
      ansible.builtin.service:
        name: telegraf
        state: restarted

    - name: Install knot.conf into /etc/knot/knot.conf
      ansible.builtin.template:
        src: "{{ local_folder_path }}/knot.conf"  
        dest: /etc/knot/knot.conf
        owner: knot  
        group: knot  
        mode: '0640'
      tags: knot-conf

    - name: Ensure /var/log/knot-query directory exists
      ansible.builtin.file:
        path: /var/log/knot-query
        state: directory
        owner: knot
        group: knot
        mode: '0755'
      tags: knot-conf


    - name: Ensure /var/log/knot-query/knot-query.log exists
      ansible.builtin.file:
        path: /var/log/knot-query/knot-query.log
        state: touch
        owner: knot
        group: knot
        mode: '0755'
      tags: knot-conf


    - name: Set permissions on /var/log/knot-query/knot-query.log
      ansible.builtin.file:
        path: /var/log/knot-query/knot-query.log
        owner: knot
        group: knot
        mode: '0755'
      tags: knot-conf


    - name: copy db.dd-empty file to /var/lib/knot
      ansible.builtin.copy:
        src: "{{ local_folder_path }}/db.dd-empty"
        dest: /var/lib/knot/db.dd-empty
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: copy db.dr-empty file to /var/lib/knot
      ansible.builtin.copy:
        src: "{{ local_folder_path }}/db.dr-empty"
        dest: /var/lib/knot/db.dr-empty
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: Template db.hostname.as112.arpa file to /var/lib/knot
      ansible.builtin.template:
        src: "{{ local_folder_path }}/db.hostname.as112.arpa.j2"
        dest: /var/lib/knot/db.hostname.as112.arpa
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: Template db.hostname.as112.net file to /var/lib/knot
      ansible.builtin.template:
        src: "{{ local_folder_path }}/db.hostname.as112.net.j2"
        dest: /var/lib/knot/db.hostname.as112.net
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: copy db.dd-empty file to /etc/knot
      ansible.builtin.copy:
        src: "{{ local_folder_path }}/db.dd-empty"
        dest: /etc/knot/db.dd-empty
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: copy db.dr-empty file to /var/lib/knot
      ansible.builtin.copy:
        src: "{{ local_folder_path }}/db.dr-empty"
        dest: /etc/knot/db.dr-empty
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: Template db.hostname.as112.arpa file to /var/lib/knot
      ansible.builtin.template:
        src: "{{ local_folder_path }}/db.hostname.as112.arpa.j2"
        dest: /etc/knot/db.hostname.as112.arpa
        owner: knot
        group: knot
        mode: '0644'
      tags: zones


    - name: Template db.hostname.as112.net file to /var/lib/knot
      ansible.builtin.template:
        src: "{{ local_folder_path }}/db.hostname.as112.net.j2"
        dest: /etc/knot/db.hostname.as112.net
        owner: knot
        group: knot
        mode: '0644'
      tags: zones

      notify: restart knot


  handlers:
    - name: restart knot
      ansible.builtin.service:
        name: knot
        state: restarted
